@page
@model CasinoDeYann.Pages.HorseRace

@{
ViewData["Title"] = "Course de chevaux";
<link rel="stylesheet" href="~/css/HorseRace.css" asp-append-version="true"/>
}

<canvas id="canvas" width="1000" height="500"></canvas>
<div id="live-ranking"></div>

<div id="bet-zone">
    <h1>Pariez sur la course</h1>
    <div>
        <label>1er</label>
        <button class="horse-select" data-rank="First" data-value="1">1</button>
        <button class="horse-select" data-rank="First" data-value="2">2</button>
        <button class="horse-select" data-rank="First" data-value="3">3</button>
        <button class="horse-select" data-rank="First" data-value="4">4</button>
        <p id="selected-First" class="selected-value"></p>
    </div>
    <div>
        <label>2e</label>
        <button class="horse-select" data-rank="Second" data-value="1">1</button>
        <button class="horse-select" data-rank="Second" data-value="2">2</button>
        <button class="horse-select" data-rank="Second" data-value="3">3</button>
        <button class="horse-select" data-rank="Second" data-value="4">4</button>
        <p id="selected-Second" class="selected-value"></p>
    </div>
    <div>
        <label>3e</label>
        <button class="horse-select" data-rank="Third" data-value="1">1</button>
        <button class="horse-select" data-rank="Third" data-value="2">2</button>
        <button class="horse-select" data-rank="Third" data-value="3">3</button>
        <button class="horse-select" data-rank="Third" data-value="4">4</button>
        <p id="selected-Third" class="selected-value"></p>
    </div>
    <div>
        <label>Mise</label>
        <button id="increase-bet">+</button>
        <button id="decrease-bet">-</button>
        <p id="bet-amount">1</p>
    </div>
    <button id="play-button">Lancer la course</button>
</div>

<div id="result" style="display:none;"></div>   

<script>
    const trackLength = 800;
const totalDistance = 100;
const speedFactor = 0.0005;

let canvas = document.getElementById('canvas');
let ctx = canvas.getContext('2d');
let betList = [1, 5, 10, 20, 50, 100, 250, 500, 750, 1000];
let betIndex = 0;
let chevaux = [];
let raceData;
let running = false;
let selections = { First: null, Second: null, Third: null };

class Cheval {
    constructor(index, paces) {
        this.index = index;
        this.paces = paces;
        this.paceIndex = 0;
        this.distInPace = 0;
        this.totalDist = 0;
        this.frame = 0;
        this.frameTimer = 0;
        this.finished = false;
    }

    update(deltaTime) {
        if (this.finished) return;
        const pace = this.paces[this.paceIndex];
        const distToMove = pace.speed * deltaTime * speedFactor;
        this.distInPace += distToMove;
        if (this.distInPace >= pace.dist) {
            this.totalDist += pace.dist;
            this.paceIndex++;
            this.distInPace = 0;
            if (this.paceIndex >= this.paces.length) {
                this.totalDist = totalDistance;
                this.finished = true;
                return;
            }
        } else {
            this.totalDist += distToMove;
        }
        this.frameTimer += deltaTime;
        const frameDelay = 3000 / pace.speed;
        if (this.frameTimer >= frameDelay) {
            this.frameTimer = 0;
            this.frame = (this.frame + 1) % 12;
        }
    }

    draw() {
        const x = (this.totalDist / totalDistance) * trackLength + 100;
        const y = 50 + this.index * 100;
        const img = document.getElementById(`sprite-${this.index}-${this.frame}`);
        ctx.drawImage(img, x, y, 80, 80);
    }
}

function startRace(data) {
    raceData = data;
    chevaux = [];
    for (let i = 0; i < 4; i++) {
        chevaux.push(new Cheval(i, data.speeds[i]));
    }
    lastTimestamp = null;
    requestAnimationFrame(animateStep);
}

let lastTimestamp = null;
function animateStep(timestamp) {
    if (!lastTimestamp) lastTimestamp = timestamp;
    const deltaTime = timestamp - lastTimestamp;
    lastTimestamp = timestamp;

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    let allFinished = true;
    chevaux.forEach(c => {
        c.update(deltaTime);
        c.draw();
        if (!c.finished) allFinished = false;
    });

    updateLiveRanking();

    if (!allFinished) {
        requestAnimationFrame(animateStep);
    } else {
        showResults(raceData);
        running = false;
    }
}

function updateLiveRanking() {
    const positions = chevaux.map(c => ({ index: c.index, dist: c.totalDist })).sort((a, b) => b.dist - a.dist);
    const rankingDiv = document.getElementById("live-ranking");
    rankingDiv.innerHTML = "Classement en temps réel: " + positions.map(p => `Cheval ${p.index + 1}`).join(" > ");
}

const buttons = document.querySelectorAll('.horse-select');
buttons.forEach(btn => {
    btn.addEventListener('click', () => {
        const rank = btn.dataset.rank;
        const value = parseInt(btn.dataset.value);
        selections[rank] = value - 1;
        document.getElementById("selected-" + rank).innerText = "Cheval " + value;
    });
});

document.getElementById("increase-bet").addEventListener("click", () => {
    betIndex = Math.min(betIndex + 1, betList.length - 1);
    document.getElementById("bet-amount").innerText = betList[betIndex];
});

document.getElementById("decrease-bet").addEventListener("click", () => {
    betIndex = Math.max(betIndex - 1, 0);
    document.getElementById("bet-amount").innerText = betList[betIndex];
});

document.getElementById("play-button").addEventListener("click", async function () {
    if (running) return;
    running = true;
    const data = {
        First: selections.First,
        Second: selections.Second,
        Third: selections.Third,
        Amount: parseInt(document.getElementById("bet-amount").innerText),
    };
    const response = await fetch('/api/HorseRace', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(data)
    });
    if (response.ok) {
        const raceData = await response.json();
        console.log(raceData);
        startRace(raceData);
    } else {
        alert("Erreur: " + await response.text());
        running = false;
    }
});

function showResults(data) {
    document.getElementById("result").style.display = "block";
    document.getElementById("result").innerText = `${data.message}\nClassement: ${data.results.join(", ")}`;
}
</script>

<!-- Preload images -->
<div style="display:none;">
    @for (int i = 0; i < 4; i++) {
        @for (int j = 0; j < 12; j++) {
            <img id="sprite-@(i)-@(j)" src="/assets/HorseRace/Horses/cheval@(i + 1)_@(j).png" />
        }
    }
</div>
