@page
@model CasinoDeYann.Pages.Roulette

@{
ViewData["Title"] = "Roulette";
<link rel="stylesheet" href="~/css/Roulette.css" asp-append-version="true" />
}

<div class="roulette-page">
    
    <div class="carpet-container">

        <div class="bet-wrapper">
            <img 
                src="~/assets/Roulette/carpet.png" 
                alt="Table Carpet" 
                class="carpet" 
            />
            
            <div class="button-overlay">
                <button class="bet-button bet-0"  data-number="0">0</button>
                <button class="bet-button bet-1"  data-number="1">1</button>
                <button class="bet-button bet-2"  data-number="2">2</button>
                <button class="bet-button bet-3"  data-number="3">3</button>
                <button class="bet-button bet-4"  data-number="4">4</button>
                <button class="bet-button bet-5"  data-number="5">5</button>
                <button class="bet-button bet-6"  data-number="6">6</button>
                <button class="bet-button bet-7"  data-number="7">7</button>
                <button class="bet-button bet-8"  data-number="8">8</button>
                <button class="bet-button bet-9"  data-number="9">9</button>
                <button class="bet-button bet-10" data-number="10">10</button>
                <button class="bet-button bet-11" data-number="11">11</button>
                <button class="bet-button bet-12" data-number="12">12</button>
                <button class="bet-button bet-13" data-number="13">13</button>
                <button class="bet-button bet-14" data-number="14">14</button>
                <button class="bet-button bet-15" data-number="15">15</button>
                <button class="bet-button bet-16" data-number="16">16</button>
                <button class="bet-button bet-17" data-number="17">17</button>
                <button class="bet-button bet-18" data-number="18">18</button>
                <button class="bet-button bet-19" data-number="19">19</button>
                <button class="bet-button bet-20" data-number="20">20</button>
                <button class="bet-button bet-21" data-number="21">21</button>
                <button class="bet-button bet-22" data-number="22">22</button>
                <button class="bet-button bet-23" data-number="23">23</button>
                <button class="bet-button bet-24" data-number="24">24</button>
                <button class="bet-button bet-25" data-number="25">25</button>
                <button class="bet-button bet-26" data-number="26">26</button>
                <button class="bet-button bet-27" data-number="27">27</button>
                <button class="bet-button bet-28" data-number="28">28</button>
                <button class="bet-button bet-29" data-number="29">29</button>
                <button class="bet-button bet-30" data-number="30">30</button>
                <button class="bet-button bet-31" data-number="31">31</button>
                <button class="bet-button bet-32" data-number="32">32</button>
                <button class="bet-button bet-33" data-number="33">33</button>
                <button class="bet-button bet-34" data-number="34">34</button>
                <button class="bet-button bet-35" data-number="35">35</button>
                <button class="bet-button bet-36" data-number="36">36</button>

                <!-- COLUMN-BET BUTTONS (the “2 à 1” spots on the far right)      -->
                <button class="bet-button bet-row1" data-bet="row1">2T1</button>
                <button class="bet-button bet-row2" data-bet="row2">2T1</button>
                <button class="bet-button bet-row3" data-bet="row3">2T1</button>

                <!-- DOZEN-BET BUTTONS (“1ère 12”, “2nde 12”, “3ème 12”)           -->
                <button class="bet-button bet-dozen1" data-bet="dozen1">1ère 12</button>
                <button class="bet-button bet-dozen2" data-bet="dozen2">2nde 12</button>
                <button class="bet-button bet-dozen3" data-bet="dozen3">3ème 12</button>


                <!-- “OUTSIDE” BETS (low/high, even/odd, red/black)                -->
                <button class="bet-button bet-low"   data-bet="low">1-18</button>
                <button class="bet-button bet-even"  data-bet="even">Pair</button>
                <button class="bet-button bet-red"   data-bet="red">Rouge</button>
                <button class="bet-button bet-black" data-bet="black">Noir</button>
                <button class="bet-button bet-odd"   data-bet="odd">Impair</button>
                <button class="bet-button bet-high"  data-bet="high">19-36</button>
                
                <!-- Chip (bet value) buttons                -->
                <button class="bet-button chip_1"  data-bet="1">19-36</button>
                <button class="bet-button chip_5"  data-bet="5">19-36</button>
                <button class="bet-button chip_25"  data-bet="25">19-36</button>
                <button class="bet-button chip_50"  data-bet="50">19-36</button>
                <button class="bet-button chip_100"  data-bet="100">19-36</button>
                <button class="bet-button chip_500"  data-bet="500">19-36</button>
                <button class="bet-button chip_1000"  data-bet="1000">19-36</button>
                
            </div>
            <button id="play-button" type="button"></button>
        </div>
    </div>

    <div class="wheel-container">
        <div class="wheel-wrapper">
            <!-- SUPPORT IMAGE: sits directly behind the wheel -->
            <img
                src="~/assets/Roulette/roulette_support.png"
                alt="Roulette Support"
                class="roulette-support"
            />

            <!-- WHEEL -->
            <img
                id="roulette-wheel"
                src="~/assets/Roulette/roulette.png"
                alt="Roulette Wheel"
                class="roulette-wheel"
            />

            <!-- BALL WRAPPER -->
            <div id="ball-wrapper" class="ball-wrapper">
                <img
                    id="roulette-ball"
                    src="~/assets/Roulette/ball.png"
                    alt="Roulette Ball"
                    class="roulette-ball"
                />
            </div>
        </div>
        <div id="result-message" class="result-message"></div>
    </div>
</div>



@section Scripts {
<script>
    (function() {
        const wheel = document.getElementById("roulette-wheel");
        const ballWrapper = document.getElementById("ball-wrapper");
        const ball = document.getElementById("roulette-ball");
        const playButton = document.getElementById("play-button");
        const resultMessage = document.getElementById("result-message");
        let running = false;

        // European roulette pockets in strict clockwise order,
        // starting from “0” at 12 o’clock, then “32” just to its right, etc.
        const numbers = [
            0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8,
            23, 10, 5, 24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26
        ];
        const segmentAngle = 360 / numbers.length; // ≈ 9.7297°

        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min)) + min;
        }

        playButton.addEventListener("click", () => {
            if (running) return;
            running = true;
            resultMessage.textContent = "";

            // === RESET THE BALL POSITION ===
            ball.classList.remove("fall");
            ball.style.opacity = "0";
            void ball.offsetHeight;

            // === CHOOSE A RANDOM WINNING NUMBER FIRST ===
            const winningIndex = getRandomInt(0, numbers.length);
            const result = numbers[winningIndex];

            // === INVERT THE ORIGINAL “offsetIndex” FORMULA ===
            // original: winningIndex = (numbers.length − offsetIndex) % numbers.length
            const offsetIndex = (numbers.length - winningIndex) % numbers.length;

            // === COMPUTE THE MIDPOINT ANGLE OF THAT SEGMENT ===
            // Each segment is 'segmentAngle' degrees wide, so its center lies at:
            //    offsetIndex * segmentAngle + segmentAngle / 2
            const midSegmentAngle = offsetIndex * segmentAngle + (segmentAngle / 2);

            // === PICK A RANDOM NUMBER OF FULL SPINS (3–6) ===
            const fullSpins = getRandomInt(3, 7); // 3, 4, 5, or 6 full turns

            // === FINAL ANGLE = full turns + exact segment midpoint ===
            const finalAngle = fullSpins * 360 + midSegmentAngle;

            // === RESET & SPIN THE WHEEL ===
            wheel.style.transition = "none";
            wheel.style.transform = "rotate(0deg)";
            void wheel.offsetHeight;

            ballWrapper.classList.remove("animate");
            void ballWrapper.offsetHeight;
            ball.style.opacity = "1";
            ballWrapper.classList.add("animate");

            wheel.style.transition = "transform 5s ease-out";
            wheel.style.transform = `rotate(${finalAngle}deg)`;

            // === AFTER 5 SECONDS: drop the ball & show the chosen number ===
            setTimeout(() => {
                ball.classList.add("fall");
                resultMessage.textContent = `Le numéro est ${result}`;
                running = false;
            }, 5000);
        });
    })();
</script>
}

